local config = require("repl69.config")
local palette = require("repl69.palette")
local util = require("repl69.util")

local M = {}

---@type repl69.HighlightsFn
function M.get(c, opts)
  local groups = {}

  for group, color in pairs(config.options.groups) do
    groups[group] = util.parse_color(color)
  end

  local function make_border(fg)
    fg = fg or groups.border
    return {
      fg = fg,
      bg = palette.none,
    }
  end

  local c = palette
  local styles = config.options.styles

  -- stylua: ignore
  return {
    ColorColumn = { bg = c.gray925 },
    Conceal = { bg = c.none },
    CurSearch = { fg = c.black, bg = c.green, blend = 60 },
    Cursor = { fg = c.gray50, bg = c.gray700 },
    CursorColumn = { bg = c.gray925 },
    -- CursorIM = {},
    CursorLine = { bg = c.gray925 },
    CursorLineNr = { fg = c.gray450, bold = styles.bold },
    -- DarkenedPanel = { },
    -- DarkenedStatusline = {},
    DiffAdd = { bg = groups.git_add, blend = 20 },
    DiffChange = { bg = groups.git_change, blend = 20 },
    DiffDelete = { bg = groups.git_delete, blend = 20 },
    DiffText = { bg = groups.git_text, blend = 40 },
    diffAdded = { link = "DiffAdd" },
    diffChanged = { link = "DiffChange" },
    diffRemoved = { link = "DiffDelete" },
    Directory = { fg = c.gray200, bold = styles.bold },
    -- EndOfBuffer = {},
    ErrorMsg = { fg = groups.error, bold = styles.bold },
    FloatBorder = make_border(),
    FloatTitle = { fg = c.gray200, bg = groups.panel, bold = styles.bold },
    FoldColumn = { fg = c.gray850 },
    Folded = { fg = c.gray50, bg = groups.panel },
    IncSearch = { link = "CurSearch" },
    LineNr = { fg = c.gray800 },
    MatchParen = { fg = c.gray500, bg = c.gray500, blend = 25 },
    ModeMsg = { fg = c.gray500 },
    MoreMsg = { fg = c.gray300 },
    NonText = { fg = c.gray850 },
    Normal = { fg = c.gray100, bg = c.black },
    NormalFloat = { bg = groups.panel },
    NormalNC = { fg = c.gray50, bg = c.black },
    NvimInternalError = { link = "ErrorMsg" },
    Pmenu = { fg = c.gray500, bg = groups.panel },
    PmenuExtra = { fg = c.gray850, bg = groups.panel },
    PmenuExtraSel = { fg = c.gray500, bg = c.gray750 },
    PmenuKind = { fg = c.gray200, bg = groups.panel },
    PmenuKindSel = { fg = c.gray500, bg = c.gray750 },
    PmenuSbar = { bg = groups.panel },
    PmenuSel = { fg = c.gray50, bg = c.gray750 },
    PmenuThumb = { bg = c.gray850 },
    Question = { fg = c.gray400 },
    -- QuickFixLink = {},
    -- RedrawDebugNormal = {},
    RedrawDebugClear = { fg = c.black, bg = c.gray400 },
    RedrawDebugComposed = { fg = c.black, bg = c.gray500 },
    RedrawDebugRecompose = { fg = c.black, bg = c.gray600 },
    Search = { fg = c.gray50, bg = c.gray400, blend = 20 },
    SignColumn = { fg = c.gray50, bg = "NONE" },
    SpecialKey = { fg = c.gray200 },
    SpellBad = { sp = c.gray500, undercurl = true },
    SpellCap = { sp = c.gray500, undercurl = true },
    SpellLocal = { sp = c.gray500, undercurl = true },
    SpellRare = { sp = c.gray500, undercurl = true },
    StatusLine = { fg = c.gray500, bg = groups.panel },
    StatusLineNC = { fg = c.gray850, bg = groups.panel, blend = 60 },
    StatusLineTerm = { fg = c.black, bg = c.gray500 },
    StatusLineTermNC = { fg = c.black, bg = c.gray500, blend = 60 },
    Substitute = { link = "IncSearch" },
    TabLine = { fg = c.gray500, bg = groups.panel },
    TabLineFill = { bg = groups.panel },
    TabLineSel = { fg = c.gray50, bg = c.gray750, bold = styles.bold },
    Title = { fg = c.gray200, bold = styles.bold },
    VertSplit = { fg = groups.border },
    Visual = { bg = c.gray300, blend = 20 },
    -- VisualNOS = {},
    WarningMsg = { fg = groups.warn, bold = styles.bold },
    -- Whitespace = {},
    WildMenu = { link = "IncSearch" },
    WinBar = { fg = c.gray500, bg = groups.panel },
    WinBarNC = { fg = c.gray850, bg = groups.panel, blend = 60 },
    WinSeparator = { fg = groups.border },

    DiagnosticError = { fg = groups.error },
    DiagnosticHint = { fg = groups.hint },
    DiagnosticInfo = { fg = groups.info },
    DiagnosticOk = { fg = groups.ok },
    DiagnosticWarn = { fg = groups.warn },
    DiagnosticDefaultError = { link = "DiagnosticError" },
    DiagnosticDefaultHint = { link = "DiagnosticHint" },
    DiagnosticDefaultInfo = { link = "DiagnosticInfo" },
    DiagnosticDefaultOk = { link = "DiagnosticOk" },
    DiagnosticDefaultWarn = { link = "DiagnosticWarn" },
    DiagnosticFloatingError = { link = "DiagnosticError" },
    DiagnosticFloatingHint = { link = "DiagnosticHint" },
    DiagnosticFloatingInfo = { link = "DiagnosticInfo" },
    DiagnosticFloatingOk = { link = "DiagnosticOk" },
    DiagnosticFloatingWarn = { link = "DiagnosticWarn" },
    DiagnosticSignError = { link = "DiagnosticError" },
    DiagnosticSignHint = { link = "DiagnosticHint" },
    DiagnosticSignInfo = { link = "DiagnosticInfo" },
    DiagnosticSignOk = { link = "DiagnosticOk" },
    DiagnosticSignWarn = { link = "DiagnosticWarn" },
    DiagnosticUnderlineError = { sp = groups.error, undercurl = true },
    DiagnosticUnderlineHint = { sp = groups.hint, undercurl = true },
    DiagnosticUnderlineInfo = { sp = groups.info, undercurl = true },
    DiagnosticUnderlineOk = { sp = groups.ok, undercurl = true },
    DiagnosticUnderlineWarn = { sp = groups.warn, undercurl = true },
    DiagnosticVirtualTextError = { fg = groups.error, bg = groups.error, blend = 10 },
    DiagnosticVirtualTextHint = { fg = groups.hint, bg = groups.hint, blend = 10 },
    DiagnosticVirtualTextInfo = { fg = groups.info, bg = groups.info, blend = 10 },
    DiagnosticVirtualTextOk = { fg = groups.ok, bg = groups.ok, blend = 10 },
    DiagnosticVirtualTextWarn = { fg = groups.warn, bg = groups.warn, blend = 10 },

    Boolean = { fg = c.gray600, bold = styles.bold },
    Character = { fg = c.gray600, bold = styles.bold },
    Comment = { fg = c.gray700, italic = styles.italic },
    Conditional = { fg = c.white, bold = styles.bold },
    Constant = { fg = c.gray600, bold = styles.bold },
    Debug = { fg = c.white },
    Define = { fg = c.white, bold = styles.bold },
    Delimiter = { fg = c.white },
    Error = { fg = c.red, bold = styles.bold },
    Exception = { fg = c.white },
    Float = { fg = c.gray600, bold = styles.bold },
    Function = { fg = c.white, bold = styles.bold },
    Identifier = { fg = c.white, bold = styles.bold },
    Include = { fg = c.white, bold = styles.bold },
    Keyword = { fg = c.gray50, bold = styles.bold },
    Label = { fg = c.white },
    LspCodeLens = { fg = c.gray600 },
    LspCodeLensSeparator = { fg = c.gray750 },
    LspInlayHint = { link = "Comment" },
    LspReferenceRead = { bg = c.gray750 },
    LspReferenceText = { bg = c.gray750 },
    LspReferenceWrite = { bg = c.gray750 },
    Macro = { fg = c.white, bold = styles.bold },
    Number = { fg = c.gray600, bold = styles.bold },
    Operator = { fg = c.gray300, bold = styles.bold },
    PreCondit = { fg = c.white, bold = styles.bold },
    PreProc = { link = "PreCondit" },
    Repeat = { fg = c.white },
    Special = { fg = c.white },
    SpecialChar = { link = "Special" },
    SpecialComment = { fg = c.gray600, bold = styles.bold },
    Statement = { fg = c.white, bold = styles.bold },
    StorageClass = { fg = c.white, bold = styles.bold },
    String = { fg = c.gray450 },
    Structure = { fg = c.white, bold = styles.bold },
    Tag = { fg = c.white },
    Todo = { fg = c.cyan500, bg = c.cyan500, blend = 20, bold = styles.bold },
    Type = { fg = c.gray50, bold = styles.bold },
    TypeDef = { link = "Type" },
    Underlined = { fg = c.gray450, underline = true },

    healthError = { fg = groups.error },
    healthSuccess = { fg = groups.info },
    healthWarning = { fg = groups.warn },

    htmlArg = { fg = c.gray300 },
    htmlBold = { bold = styles.bold },
    htmlEndTag = { fg = c.gray500 },
    htmlH1 = { link = "markdownH1" },
    htmlH2 = { link = "markdownH2" },
    htmlH3 = { link = "markdownH3" },
    htmlH4 = { link = "markdownH4" },
    htmlH5 = { link = "markdownH5" },
    htmlItalic = { italic = styles.italic },
    htmlLink = { link = "markdownUrl" },
    htmlTag = { fg = c.gray500 },
    htmlTagN = { fg = c.gray50 },
    htmlTagName = { fg = c.gray200 },

    markdownDelimiter = { fg = c.gray500 },
    markdownH1 = { fg = groups.h1, bold = styles.bold, blend = 10 },
    markdownH1Delimiter = { link = "markdownH1" },
    markdownH2 = { fg = groups.h2, bold = styles.bold, blend = 10 },
    markdownH2Delimiter = { link = "markdownH2" },
    markdownH3 = { fg = groups.h3, bold = styles.bold, blend = 10 },
    markdownH3Delimiter = { link = "markdownH3" },
    markdownH4 = { fg = groups.h4, bold = styles.bold, blend = 10 },
    markdownH4Delimiter = { link = "markdownH4" },
    markdownH5 = { fg = groups.h5, bold = styles.bold, blend = 10 },
    markdownH5Delimiter = { link = "markdownH5" },
    markdownH6 = { fg = groups.h6, bold = styles.bold, blend = 10 },
    markdownH6Delimiter = { link = "markdownH6" },
    markdownLinkText = { link = "markdownUrl" },
    markdownUrl = { fg = groups.link, sp = groups.link, underline = true },

    mkdCode = { fg = c.gray200, italic = styles.italic },
    mkdCodeDelimiter = { fg = c.gray100 },
    mkdCodeEnd = { fg = c.gray200 },
    mkdCodeStart = { fg = c.gray200 },
    mkdFootnotes = { fg = c.gray200 },
    mkdID = { fg = c.gray200, underline = true },
    mkdInlineURL = { link = "markdownUrl" },
    mkdLink = { link = "markdownUrl" },
    mkdLinkDef = { link = "markdownUrl" },
    mkdListItemLine = { fg = c.gray50 },
    mkdRule = { fg = c.gray500 },
    mkdURL = { link = "markdownUrl" },

    --- Treesitter
    --- |:help treesitter-highlight-groups|
    ["@variable"] = { fg = c.gray50, italic = styles.italic },
    ["@variable.builtin"] = { fg = c.gray600, italic = styles.italic, bold = styles.bold },
    ["@variable.parameter"] = { fg = c.gray300, italic = styles.italic },
    ["@variable.parameter.builtin"] = { fg = c.gray300, italic = styles.italic, bold = styles.bold },
    ["@variable.member"] = { fg = c.gray200 },

    ["@constant"] = { fg = c.gray400 },
    ["@constant.builtin"] = { fg = c.gray400, bold = styles.bold },
    ["@constant.macro"] = { fg = c.gray400 },

    ["@module"] = { fg = c.gray400 },
    ["@module.builtin"] = { fg = c.gray400, bold = styles.bold },
    ["@label"] = { link = "Label" },

    ["@string"] = { link = "String" },
    -- ["@string.documentation"] = {},
    ["@string.regexp"] = { fg = c.gray300 },
    ["@string.escape"] = { fg = c.gray500 },
    ["@string.special"] = { link = "String" },
    ["@string.special.symbol"] = { link = "Identifier" },
    ["@string.special.url"] = { fg = groups.link },
    -- ["@string.special.path"] = {},

    ["@character"] = { link = "Character" },
    ["@character.special"] = { link = "Character" },

    ["@boolean"] = { link = "Boolean" },
    ["@number"] = { link = "Number" },
    ["@number.float"] = { link = "Number" },
    ["@float"] = { link = "Number" },

    ["@type"] = { fg = c.gray100 },
    ["@type.builtin"] = { fg = c.gray100, bold = styles.bold },
    -- ["@type.definition"] = {},

    ["@attribute"] = { fg = c.gray300 },
    ["@attribute.builtin"] = { fg = c.gray300, bold = styles.bold },
    ["@property"] = { fg = c.gray200, italic = styles.italic },

    ["@function"] = { fg = c.gray100 },
    ["@function.builtin"] = { fg = c.gray100, bold = styles.bold },
    -- ["@function.call"] = {},
    ["@function.macro"] = { link = "Function" },
    ["@function.method"] = { fg = c.gray100 },
    ["@function.method.call"] = { fg = c.gray300 },
    ["@function.method.php"] = { link = "Function" },
    ["@function.method.call.php"] = { link = "Function" },

    ["@method.php"] = { link = "@function.method.php" },
    ["@method.call.php"] = { link = "@function.method.call.php" },

    ["@constructor"] = { fg = c.gray200 },
    ["@operator"] = { link = "Operator" },

    ["@keyword"] = { link = "Keyword" },
    -- ["@keyword.coroutine"] = {},
    -- ["@keyword.function"] = {},
    ["@keyword.operator"] = { fg = c.gray200 },
    ["@keyword.import"] = { fg = c.gray200 },
    ["@keyword.storage"] = { fg = c.gray200 },
    ["@keyword.repeat"] = { fg = c.gray200 },
    ["@keyword.return"] = { fg = c.gray200 },
    ["@keyword.debug"] = { fg = c.gray200 },
    ["@keyword.exception"] = { fg = c.gray200 },

    ["@keyword.conditional"] = { fg = c.gray200 },
    ["@keyword.conditional.ternary"] = { fg = c.gray200 },

    ["@keyword.directive"] = { fg = c.gray200 },
    ["@keyword.directive.define"] = { fg = c.gray200 },

    --- Punctuation
    ["@punctuation.delimiter"] = { fg = c.gray500 },
    ["@punctuation.bracket"] = { fg = c.gray500 },
    ["@punctuation.special"] = { fg = c.gray500 },

    --- Comments
    ["@comment"] = { link = "Comment" },
    -- ["@comment.documentation"] = {},

    ["@comment.error"] = { fg = groups.error },
    ["@comment.warning"] = { fg = groups.warn },
    ["@comment.todo"] = { fg = groups.todo, bg = groups.todo, blend = 15 },
    ["@comment.hint"] = { fg = groups.hint, bg = groups.hint, blend = 15 },
    ["@comment.info"] = { fg = groups.info, bg = groups.info, blend = 15 },
    ["@comment.note"] = { fg = groups.note, bg = groups.note, blend = 15 },

    --- Markup
    ["@markup.strong"] = { bold = styles.bold },
    ["@markup.italic"] = { italic = styles.italic },
    ["@markup.strikethrough"] = { strikethrough = true },
    ["@markup.underline"] = { underline = true },

    ["@markup.heading"] = { fg = c.gray200, bold = styles.bold },

    ["@markup.quote"] = { fg = c.gray50 },
    ["@markup.math"] = { link = "Special" },
    ["@markup.environment"] = { link = "Macro" },
    ["@markup.environment.name"] = { link = "@type" },

    -- ["@markup.link"] = {},
    ["@markup.link.markdown_inline"] = { fg = c.gray500 },
    ["@markup.link.label.markdown_inline"] = { fg = c.gray200 },
    ["@markup.link.url"] = { fg = groups.link },

    -- ["@markup.raw"] = { bg = c.gray900 },
    -- ["@markup.raw.block"] = { bg = c.gray900 },
    ["@markup.raw.delimiter.markdown"] = { fg = c.gray500 },

    ["@markup.list"] = { fg = c.gray500 },
    ["@markup.list.checked"] = { fg = c.gray200, bg = c.gray200, blend = 10 },
    ["@markup.list.unchecked"] = { fg = c.gray50 },

    -- Markdown headings
    ["@markup.heading.1.markdown"] = { link = "markdownH1" },
    ["@markup.heading.2.markdown"] = { link = "markdownH2" },
    ["@markup.heading.3.markdown"] = { link = "markdownH3" },
    ["@markup.heading.4.markdown"] = { link = "markdownH4" },
    ["@markup.heading.5.markdown"] = { link = "markdownH5" },
    ["@markup.heading.6.markdown"] = { link = "markdownH6" },
    ["@markup.heading.1.marker.markdown"] = { link = "markdownH1Delimiter" },
    ["@markup.heading.2.marker.markdown"] = { link = "markdownH2Delimiter" },
    ["@markup.heading.3.marker.markdown"] = { link = "markdownH3Delimiter" },
    ["@markup.heading.4.marker.markdown"] = { link = "markdownH4Delimiter" },
    ["@markup.heading.5.marker.markdown"] = { link = "markdownH5Delimiter" },
    ["@markup.heading.6.marker.markdown"] = { link = "markdownH6Delimiter" },

    ["@diff.plus"] = { fg = groups.git_add, bg = groups.git_add, blend = 20 },
    ["@diff.minus"] = { fg = groups.git_delete, bg = groups.git_delete, blend = 20 },
    ["@diff.delta"] = { bg = groups.git_change, blend = 20 },

    ["@tag"] = { link = "Tag" },
    ["@tag.attribute"] = { fg = c.gray300 },
    ["@tag.delimiter"] = { fg = c.gray500 },

    --- Non-highlighting captures
    -- ["@none"] = {},
    ["@conceal"] = { link = "Conceal" },
    ["@conceal.markdown"] = { fg = c.gray500 },

    -- ["@spell"] = {},
    -- ["@nospell"] = {},

    --- Semantic
    ["@lsp.type.comment"] = {},
    ["@lsp.type.comment.c"] = { link = "@comment" },
    ["@lsp.type.comment.cpp"] = { link = "@comment" },
    ["@lsp.type.enum"] = { link = "@type" },
    ["@lsp.type.interface"] = { link = "@interface" },
    ["@lsp.type.keyword"] = { link = "@keyword" },
    ["@lsp.type.namespace"] = { link = "@namespace" },
    ["@lsp.type.namespace.python"] = { link = "@variable" },
    ["@lsp.type.parameter"] = { link = "@parameter" },
    ["@lsp.type.property"] = { link = "@property" },
    ["@lsp.type.variable"] = {}, -- defer to treesitter for regular variables
    ["@lsp.type.variable.svelte"] = { link = "@variable" },
    ["@lsp.typemod.function.defaultLibrary"] = { link = "@function.builtin" },
    ["@lsp.typemod.operator.injected"] = { link = "@operator" },
    ["@lsp.typemod.string.injected"] = { link = "@string" },
    ["@lsp.typemod.variable.constant"] = { link = "@constant" },
    ["@lsp.typemod.variable.defaultLibrary"] = { link = "@variable.builtin" },
    ["@lsp.typemod.variable.injected"] = { link = "@variable" },

    --- Plugins
    -- romgrk/barbar.nvim
    BufferCurrent = { fg = c.gray50, bg = c.gray750 },
    BufferCurrentIndex = { fg = c.gray50, bg = c.gray750 },
    BufferCurrentMod = { fg = c.gray200, bg = c.gray750 },
    BufferCurrentSign = { fg = c.gray500, bg = c.gray750 },
    BufferCurrentTarget = { fg = c.gray400, bg = c.gray750 },
    BufferInactive = { fg = c.gray500 },
    BufferInactiveIndex = { fg = c.gray500 },
    BufferInactiveMod = { fg = c.gray200 },
    BufferInactiveSign = { fg = c.gray850 },
    BufferInactiveTarget = { fg = c.gray400 },
    BufferTabpageFill = { fg = "NONE", bg = "NONE" },
    BufferVisible = { fg = c.gray500 },
    BufferVisibleIndex = { fg = c.gray500 },
    BufferVisibleMod = { fg = c.gray200 },
    BufferVisibleSign = { fg = c.gray850 },
    BufferVisibleTarget = { fg = c.gray400 },

    -- lewis6991/gitsigns.nvim
    GitSignsAdd = { fg = groups.git_add, bg = "NONE" },
    GitSignsChange = { fg = groups.git_change, bg = "NONE" },
    GitSignsDelete = { fg = groups.git_delete, bg = "NONE" },
    SignAdd = { fg = groups.git_add, bg = "NONE" },
    SignChange = { fg = groups.git_change, bg = "NONE" },
    SignDelete = { fg = groups.git_delete, bg = "NONE" },

    -- mvllow/modes.nvim
    ModesCopy = { bg = c.gray400 },
    ModesDelete = { bg = c.gray600 },
    ModesInsert = { bg = c.gray200 },
    ModesReplace = { bg = c.gray500 },
    ModesVisual = { bg = c.gray300 },

    -- kyazdani42/nvim-tree.lua
    NvimTreeEmptyFolderName = { fg = c.gray850 },
    NvimTreeFileDeleted = { fg = groups.git_delete },
    NvimTreeFileDirty = { fg = groups.git_dirty },
    NvimTreeFileMerge = { fg = groups.git_merge },
    NvimTreeFileNew = { fg = c.gray200 },
    NvimTreeFileRenamed = { fg = groups.git_rename },
    NvimTreeFileStaged = { fg = groups.git_stage },
    NvimTreeFolderIcon = { fg = c.gray500 },
    NvimTreeFolderName = { fg = c.gray200 },
    NvimTreeGitDeleted = { fg = groups.git_delete },
    NvimTreeGitDirty = { fg = groups.git_dirty },
    NvimTreeGitIgnored = { fg = groups.git_ignore },
    NvimTreeGitMerge = { fg = groups.git_merge },
    NvimTreeGitNew = { fg = groups.git_add },
    NvimTreeGitRenamed = { fg = groups.git_rename },
    NvimTreeGitStaged = { fg = groups.git_stage },
    NvimTreeImageFile = { fg = c.gray50 },
    NvimTreeNormal = { link = "Normal" },
    NvimTreeOpenedFile = { fg = c.gray50, bg = c.gray750 },
    NvimTreeOpenedFolderName = { link = "NvimTreeFolderName" },
    NvimTreeRootFolder = { fg = c.gray200, bold = styles.bold },
    NvimTreeSpecialFile = { link = "NvimTreeNormal" },
    NvimTreeWindowPicker = { link = "StatusLineTerm" },

    -- nvim-neotest/neotest
    NeotestAdapterName = { fg = c.gray300 },
    NeotestBorder = { fg = c.gray800 },
    NeotestDir = { fg = c.gray200 },
    NeotestExpandMarker = { fg = c.gray800 },
    NeotestFailed = { fg = c.gray600 },
    NeotestFile = { fg = c.gray50 },
    NeotestFocused = { fg = c.gray400, bg = c.gray800 },
    NeotestIndent = { fg = c.gray800 },
    NeotestMarked = { fg = c.gray100, bold = styles.bold },
    NeotestNamespace = { fg = c.gray400 },
    NeotestPassed = { fg = c.gray500 },
    NeotestRunning = { fg = c.gray400 },
    NeotestWinSelect = { fg = c.gray850 },
    NeotestSkipped = { fg = c.gray500 },
    NeotestTarget = { fg = c.gray600 },
    NeotestTest = { fg = c.gray400 },
    NeotestUnknown = { fg = c.gray500 },
    NeotestWatching = { fg = c.gray300 },

    -- nvim-neo-tree/neo-tree.nvim
    NeoTreeGitAdded = { fg = groups.git_add },
    NeoTreeGitConflict = { fg = groups.git_merge },
    NeoTreeGitDeleted = { fg = groups.git_delete },
    NeoTreeGitIgnored = { fg = groups.git_ignore },
    NeoTreeGitModified = { fg = groups.git_dirty },
    NeoTreeGitRenamed = { fg = groups.git_rename },
    NeoTreeGitUntracked = { fg = groups.git_untracked },
    NeoTreeTabActive = { fg = c.gray50, bg = c.gray750 },
    NeoTreeTabInactive = { fg = c.gray500 },
    NeoTreeTabSeparatorActive = { link = "WinSeparator" },
    NeoTreeTabSeparatorInactive = { link = "WinSeparator" },
    NeoTreeTitleBar = { link = "StatusLineTerm" },

    -- folke/flash.nvim
    FlashLabel = { fg = c.black, bg = c.gray600 },

    -- folke/which-key.nvim
    WhichKey = { fg = c.gray300 },
    WhichKeyBorder = make_border(),
    WhichKeyDesc = { fg = c.gray400 },
    WhichKeyFloat = { bg = groups.panel },
    WhichKeyGroup = { fg = c.gray200 },
    WhichKeyIcon = { fg = c.gray200 },
    WhichKeyIconAzure = { fg = c.gray200 },
    WhichKeyIconBlue = { fg = c.gray200 },
    WhichKeyIconCyan = { fg = c.gray200 },
    WhichKeyIconGreen = { fg = c.gray200 },
    WhichKeyIconGrey = { fg = c.gray200 },
    WhichKeyIconOrange = { fg = c.gray200 },
    WhichKeyIconPurple = { fg = c.gray200 },
    WhichKeyIconRed = { fg = c.gray200 },
    WhichKeyIconYellow = { fg = c.gray200 },
    WhichKeyNormal = { link = "NormalFloat" },
    WhichKeySeparator = { fg = c.gray500 },
    WhichKeyTitle = { link = "FloatTitle" },
    WhichKeyValue = { fg = c.gray100 },

    -- lukas-reineke/indent-blankline.nvim
    IblIndent = { fg = c.gray750 },
    IblScope = { fg = c.gray200 },
    IblWhitespace = { fg = c.gray750 },

    -- hrsh7th/nvim-cmp
    CmpItemAbbr = { fg = c.gray500 },
    CmpItemAbbrDeprecated = { fg = c.gray500, strikethrough = true },
    CmpItemAbbrMatch = { fg = c.gray50, bold = styles.bold },
    CmpItemAbbrMatchFuzzy = { fg = c.gray50, bold = styles.bold },
    CmpItemKind = { fg = c.gray500 },
    CmpItemKindClass = { link = "StorageClass" },
    CmpItemKindFunction = { link = "Function" },
    CmpItemKindInterface = { link = "Type" },
    CmpItemKindMethod = { link = "PreProc" },
    CmpItemKindSnippet = { link = "String" },
    CmpItemKindVariable = { link = "Identifier" },

    -- NeogitOrg/neogit
    -- https://github.com/NeogitOrg/neogit/blob/master/lua/neogit/lib/hl.lua#L109-L198
    NeogitChangeAdded = { fg = groups.git_add, bold = styles.bold, italic = styles.italic },
    NeogitChangeBothModified = { fg = groups.git_change, bold = styles.bold, italic = styles.italic },
    NeogitChangeCopied = { fg = groups.git_untracked, bold = styles.bold, italic = styles.italic },
    NeogitChangeDeleted = { fg = groups.git_delete, bold = styles.bold, italic = styles.italic },
    NeogitChangeModified = { fg = groups.git_change, bold = styles.bold, italic = styles.italic },
    NeogitChangeNewFile = { fg = groups.git_stage, bold = styles.bold, italic = styles.italic },
    NeogitChangeRenamed = { fg = groups.git_rename, bold = styles.bold, italic = styles.italic },
    NeogitChangeUpdated = { fg = groups.git_change, bold = styles.bold, italic = styles.italic },
    NeogitDiffAddHighlight = { link = "DiffAdd" },
    NeogitDiffContextHighlight = { bg = c.gray900 },
    NeogitDiffDeleteHighlight = { link = "DiffDelete" },
    NeogitFilePath = { fg = c.gray200, italic = styles.italic },
    NeogitHunkHeader = { bg = groups.panel },
    NeogitHunkHeaderHighlight = { bg = groups.panel },

    -- vimwiki/vimwiki
    VimwikiHR = { fg = c.gray500 },
    VimwikiHeader1 = { link = "markdownH1" },
    VimwikiHeader2 = { link = "markdownH2" },
    VimwikiHeader3 = { link = "markdownH3" },
    VimwikiHeader4 = { link = "markdownH4" },
    VimwikiHeader5 = { link = "markdownH5" },
    VimwikiHeader6 = { link = "markdownH6" },
    VimwikiHeaderChar = { fg = c.gray500 },
    VimwikiLink = { link = "markdownUrl" },
    VimwikiList = { fg = c.gray300 },
    VimwikiNoExistsLink = { fg = c.gray600 },

    -- nvim-neorg/neorg
    NeorgHeading1Prefix = { link = "markdownH1Delimiter" },
    NeorgHeading1Title = { link = "markdownH1" },
    NeorgHeading2Prefix = { link = "markdownH2Delimiter" },
    NeorgHeading2Title = { link = "markdownH2" },
    NeorgHeading3Prefix = { link = "markdownH3Delimiter" },
    NeorgHeading3Title = { link = "markdownH3" },
    NeorgHeading4Prefix = { link = "markdownH4Delimiter" },
    NeorgHeading4Title = { link = "markdownH4" },
    NeorgHeading5Prefix = { link = "markdownH5Delimiter" },
    NeorgHeading5Title = { link = "markdownH5" },
    NeorgHeading6Prefix = { link = "markdownH6Delimiter" },
    NeorgHeading6Title = { link = "markdownH6" },
    NeorgMarkerTitle = { fg = c.gray200, bold = styles.bold },

    -- tami5/lspsaga.nvim (fork of glepnir/lspsaga.nvim)
    DefinitionCount = { fg = c.gray100 },
    DefinitionIcon = { fg = c.gray100 },
    DefinitionPreviewTitle = { fg = c.gray100, bold = styles.bold },
    LspFloatWinBorder = make_border(),
    LspFloatWinNormal = { bg = groups.panel },
    LspSagaAutoPreview = { fg = c.gray500 },
    LspSagaCodeActionBorder = make_border(c.gray100),
    LspSagaCodeActionContent = { fg = c.gray200 },
    LspSagaCodeActionTitle = { fg = c.gray400, bold = styles.bold },
    LspSagaCodeActionTruncateLine = { link = "LspSagaCodeActionBorder" },
    LspSagaDefPreviewBorder = make_border(),
    LspSagaDiagnosticBorder = make_border(c.gray400),
    LspSagaDiagnosticHeader = { fg = c.gray200, bold = styles.bold },
    LspSagaDiagnosticTruncateLine = { link = "LspSagaDiagnosticBorder" },
    LspSagaDocTruncateLine = { link = "LspSagaHoverBorder" },
    LspSagaFinderSelection = { fg = c.gray400 },
    LspSagaHoverBorder = { link = "LspFloatWinBorder" },
    LspSagaLspFinderBorder = { link = "LspFloatWinBorder" },
    LspSagaRenameBorder = make_border(c.gray500),
    LspSagaRenamePromptPrefix = { fg = c.gray600 },
    LspSagaShTruncateLine = { link = "LspSagaSignatureHelpBorder" },
    LspSagaSignatureHelpBorder = make_border(c.gray200),
    ReferencesCount = { fg = c.gray100 },
    ReferencesIcon = { fg = c.gray100 },
    SagaShadow = { bg = c.gray750 },
    TargetWord = { fg = c.gray300 },

    -- ray-x/lsp_signature.nvim
    LspSignatureActiveParameter = { bg = c.gray750 },

    -- rlane/pounce.nvim
    PounceAccept = { fg = c.gray600, bg = c.gray600, blend = 20 },
    PounceAcceptBest = { fg = c.gray400, bg = c.gray400, blend = 20 },
    PounceGap = { link = "Search" },
    PounceMatch = { link = "Search" },

    -- ggandor/leap.nvim
    LeapLabelPrimary = { link = "IncSearch" },
    LeapLabelSecondary = { link = "StatusLineTerm" },
    LeapMatch = { link = "MatchParen" },

    -- phaazon/hop.nvim
    -- smoka7/hop.nvim
    HopNextKey = { fg = c.gray600, bg = c.gray600, blend = 20 },
    HopNextKey1 = { fg = c.gray200, bg = c.gray200, blend = 20 },
    HopNextKey2 = { fg = c.gray500, bg = c.gray500, blend = 20 },
    HopUnmatched = { fg = c.gray850 },

    -- nvim-telescope/telescope.nvim
    TelescopeBorder = make_border(),
    TelescopeMatching = { fg = c.gray100 },
    TelescopeNormal = { link = "NormalFloat" },
    TelescopePromptNormal = { link = "TelescopeNormal" },
    TelescopePromptPrefix = { fg = c.gray500 },
    TelescopeSelection = { fg = c.gray50, bg = c.gray750 },
    TelescopeSelectionCaret = { fg = c.gray100, bg = c.gray750 },
    TelescopeTitle = { fg = c.gray200, bold = styles.bold },

    -- ibhagwan/fzf-lua
    FzfLuaBorder = make_border(),
    FzfLuaBufFlagAlt = { fg = c.gray500 },
    FzfLuaBufFlagCur = { fg = c.gray500 },
    FzfLuaCursorLine = { fg = c.gray50, bg = c.gray900 },
    FzfLuaFilePart = { fg = c.gray450 },
    FzfLuaHeaderBind = { fg = c.gray100 },
    FzfLuaHeaderText = { fg = c.gray600 },
    FzfLuaNormal = { link = "NormalFloat" },
    FzfLuaTitle = { link = "FloatTitle" },

    -- rcarriga/nvim-notify
    NotifyBackground = { link = "NormalFloat" },
    NotifyDEBUGBody = { link = "NormalFloat" },
    NotifyDEBUGBorder = make_border(),
    NotifyDEBUGIcon = { link = "NotifyDEBUGTitle" },
    NotifyDEBUGTitle = { fg = c.gray850 },
    NotifyERRORBody = { link = "NormalFloat" },
    NotifyERRORBorder = make_border(groups.error),
    NotifyERRORIcon = { link = "NotifyERRORTitle" },
    NotifyERRORTitle = { fg = groups.error },
    NotifyINFOBody = { link = "NormalFloat" },
    NotifyINFOBorder = make_border(groups.info),
    NotifyINFOIcon = { link = "NotifyINFOTitle" },
    NotifyINFOTitle = { fg = groups.info },
    NotifyTRACEBody = { link = "NormalFloat" },
    NotifyTRACEBorder = make_border(c.gray300),
    NotifyTRACEIcon = { link = "NotifyTRACETitle" },
    NotifyTRACETitle = { fg = c.gray300 },
    NotifyWARNBody = { link = "NormalFloat" },
    NotifyWARNBorder = make_border(groups.warn),
    NotifyWARNIcon = { link = "NotifyWARNTitle" },
    NotifyWARNTitle = { fg = groups.warn },

    -- rcarriga/nvim-dap-ui
    DapUIBreakpointsCurrentLine = { fg = c.gray400, bold = styles.bold },
    DapUIBreakpointsDisabledLine = { fg = c.gray850 },
    DapUIBreakpointsInfo = { link = "DapUIThread" },
    DapUIBreakpointsLine = { link = "DapUIBreakpointsPath" },
    DapUIBreakpointsPath = { fg = c.gray200 },
    DapUIDecoration = { link = "DapUIBreakpointsPath" },
    DapUIFloatBorder = make_border(),
    DapUIFrameName = { fg = c.gray50 },
    DapUILineNumber = { link = "DapUIBreakpointsPath" },
    DapUIModifiedValue = { fg = c.gray200, bold = styles.bold },
    DapUIScope = { link = "DapUIBreakpointsPath" },
    DapUISource = { fg = c.gray300 },
    DapUIStoppedThread = { link = "DapUIBreakpointsPath" },
    DapUIThread = { fg = c.gray400 },
    DapUIValue = { fg = c.gray50 },
    DapUIVariable = { fg = c.gray50 },
    DapUIWatchesEmpty = { fg = c.gray600 },
    DapUIWatchesError = { link = "DapUIWatchesEmpty" },
    DapUIWatchesValue = { link = "DapUIThread" },

    -- glepnir/dashboard-nvim
    DashboardCenter = { fg = c.gray400 },
    DashboardFooter = { fg = c.gray300 },
    DashboardHeader = { fg = c.gray500 },
    DashboardShortcut = { fg = c.gray600 },

    -- SmiteshP/nvim-navic
    NavicIconsArray = { fg = c.gray400 },
    NavicIconsBoolean = { fg = c.gray100 },
    NavicIconsClass = { fg = c.gray200 },
    NavicIconsConstant = { fg = c.gray400 },
    NavicIconsConstructor = { fg = c.gray400 },
    NavicIconsEnum = { fg = c.gray400 },
    NavicIconsEnumMember = { fg = c.gray200 },
    NavicIconsEvent = { fg = c.gray400 },
    NavicIconsField = { fg = c.gray200 },
    NavicIconsFile = { fg = c.gray850 },
    NavicIconsFunction = { fg = c.gray500 },
    NavicIconsInterface = { fg = c.gray200 },
    NavicIconsKey = { fg = c.gray300 },
    NavicIconsKeyword = { fg = c.gray500 },
    NavicIconsMethod = { fg = c.gray300 },
    NavicIconsModule = { fg = c.gray100 },
    NavicIconsNamespace = { fg = c.gray850 },
    NavicIconsNull = { fg = c.gray600 },
    NavicIconsNumber = { fg = c.gray400 },
    NavicIconsObject = { fg = c.gray400 },
    NavicIconsOperator = { fg = c.gray500 },
    NavicIconsPackage = { fg = c.gray850 },
    NavicIconsProperty = { fg = c.gray200 },
    NavicIconsString = { fg = c.gray400 },
    NavicIconsStruct = { fg = c.gray200 },
    NavicIconsTypeParameter = { fg = c.gray200 },
    NavicIconsVariable = { fg = c.gray50 },
    NavicSeparator = { fg = c.gray500 },
    NavicText = { fg = c.gray500 },

    -- folke/noice.nvim
    NoiceCursor = { fg = c.gray700, bg = c.gray50 },

    -- folke/trouble.nvim
    TroubleText = { fg = c.gray500 },
    TroubleCount = { fg = c.gray300, bg = c.gray900 },
    TroubleNormal = { fg = c.gray50, bg = groups.panel },

    -- echasnovski/mini.nvim
    MiniAnimateCursor = { reverse = true, nocombine = true },
    MiniAnimateNormalFloat = { link = "NormalFloat" },

    MiniClueBorder = { link = "FloatBorder" },
    MiniClueDescGroup = { link = "DiagnosticFloatingWarn" },
    MiniClueDescSingle = { link = "NormalFloat" },
    MiniClueNextKey = { link = "DiagnosticFloatingHint" },
    MiniClueNextKeyWithPostkeys = { link = "DiagnosticFloatingError" },
    MiniClueSeparator = { link = "DiagnosticFloatingInfo" },
    MiniClueTitle = { bg = groups.panel, bold = styles.bold },

    MiniCompletionActiveParameter = { underline = true },

    MiniCursorword = { underline = true },
    MiniCursorwordCurrent = { underline = true },

    MiniDepsChangeAdded = { fg = groups.git_add },
    MiniDepsChangeRemoved = { fg = groups.git_delete },
    MiniDepsHint = { link = "DiagnosticHint" },
    MiniDepsInfo = { link = "DiagnosticInfo" },
    MiniDepsMsgBreaking = { link = "DiagnosticWarn" },
    MiniDepsPlaceholder = { link = "Comment" },
    MiniDepsTitle = { link = "Title" },
    MiniDepsTitleError = { link = "DiffDelete" },
    MiniDepsTitleSame = { link = "DiffText" },
    MiniDepsTitleUpdate = { link = "DiffAdd" },

    MiniDiffOverAdd = { fg = groups.git_add, bg = groups.git_add, blend = 20 },
    MiniDiffOverChange = { fg = groups.git_change, bg = groups.git_change, blend = 20 },
    MiniDiffOverContext = { bg = c.gray900 },
    MiniDiffOverDelete = { fg = groups.git_delete, bg = groups.git_delete, blend = 20 },
    MiniDiffSignAdd = { fg = groups.git_add },
    MiniDiffSignChange = { fg = groups.git_change },
    MiniDiffSignDelete = { fg = groups.git_delete },

    MiniFilesBorder = { link = "FloatBorder" },
    MiniFilesBorderModified = { link = "DiagnosticFloatingWarn" },
    MiniFilesCursorLine = { link = "CursorLine" },
    MiniFilesDirectory = { link = "Directory" },
    MiniFilesFile = { fg = c.gray50 },
    MiniFilesNormal = { link = "NormalFloat" },
    MiniFilesTitle = { link = "FloatTitle" },
    MiniFilesTitleFocused = { fg = c.gray100, bg = groups.panel, bold = styles.bold },

    MiniHipatternsFixme = { fg = c.black, bg = groups.error, bold = styles.bold },
    MiniHipatternsHack = { fg = c.black, bg = groups.warn, bold = styles.bold },
    MiniHipatternsNote = { fg = c.black, bg = groups.info, bold = styles.bold },
    MiniHipatternsTodo = { fg = c.black, bg = groups.hint, bold = styles.bold },

    MiniIconsAzure = { fg = c.gray200 },
    MiniIconsBlue = { fg = c.gray200 },
    MiniIconsCyan = { fg = c.gray200 },
    MiniIconsGreen = { fg = c.gray200 },
    MiniIconsGrey = { fg = c.gray200 },
    MiniIconsOrange = { fg = c.gray200 },
    MiniIconsPurple = { fg = c.gray200 },
    MiniIconsRed = { fg = c.gray200 },
    MiniIconsYellow = { fg = c.gray200 },

    MiniIndentscopeSymbol = { fg = c.gray850 },
    MiniIndentscopeSymbolOff = { fg = c.gray400 },

    MiniJump = { sp = c.gray400, undercurl = true },

    MiniJump2dDim = { fg = c.gray500 },
    MiniJump2dSpot = { fg = c.gray400, bold = styles.bold, nocombine = true },
    MiniJump2dSpotAhead = { fg = c.gray200, bg = c.gray900, nocombine = true },
    MiniJump2dSpotUnique = { fg = c.gray100, bold = styles.bold, nocombine = true },

    MiniMapNormal = { link = "NormalFloat" },
    MiniMapSymbolCount = { link = "Special" },
    MiniMapSymbolLine = { link = "Title" },
    MiniMapSymbolView = { link = "Delimiter" },

    MiniNotifyBorder = { link = "FloatBorder" },
    MiniNotifyNormal = { link = "NormalFloat" },
    MiniNotifyTitle = { link = "FloatTitle" },

    MiniOperatorsExchangeFrom = { link = "IncSearch" },

    MiniPickBorder = { link = "FloatBorder" },
    MiniPickBorderBusy = { link = "DiagnosticFloatingWarn" },
    MiniPickBorderText = { bg = groups.panel },
    MiniPickIconDirectory = { link = "Directory" },
    MiniPickIconFile = { link = "MiniPickNormal" },
    MiniPickHeader = { link = "DiagnosticFloatingHint" },
    MiniPickMatchCurrent = { link = "CursorLine" },
    MiniPickMatchMarked = { link = "Visual" },
    MiniPickMatchRanges = { fg = c.gray200 },
    MiniPickNormal = { link = "NormalFloat" },
    MiniPickPreviewLine = { link = "CursorLine" },
    MiniPickPreviewRegion = { link = "IncSearch" },
    MiniPickPrompt = { bg = groups.panel, bold = styles.bold },

    MiniStarterCurrent = { nocombine = true },
    MiniStarterFooter = { fg = c.gray500 },
    MiniStarterHeader = { link = "Title" },
    MiniStarterInactive = { link = "Comment" },
    MiniStarterItem = { link = "Normal" },
    MiniStarterItemBullet = { link = "Delimiter" },
    MiniStarterItemPrefix = { link = "WarningMsg" },
    MiniStarterSection = { fg = c.gray100 },
    MiniStarterQuery = { link = "MoreMsg" },

    MiniStatuslineDevinfo = { fg = c.gray500, bg = c.gray750 },
    MiniStatuslineFileinfo = { link = "MiniStatuslineDevinfo" },
    MiniStatuslineFilename = { fg = c.gray850, bg = c.gray900 },
    MiniStatuslineInactive = { link = "MiniStatuslineFilename" },
    MiniStatuslineModeCommand = { fg = c.black, bg = c.gray600, bold = styles.bold },
    MiniStatuslineModeInsert = { fg = c.black, bg = c.gray200, bold = styles.bold },
    MiniStatuslineModeNormal = { fg = c.black, bg = c.gray100, bold = styles.bold },
    MiniStatuslineModeOther = { fg = c.black, bg = c.gray100, bold = styles.bold },
    MiniStatuslineModeReplace = { fg = c.black, bg = c.gray500, bold = styles.bold },
    MiniStatuslineModeVisual = { fg = c.black, bg = c.gray300, bold = styles.bold },

    MiniSurround = { link = "IncSearch" },

    MiniTablineCurrent = { fg = c.gray50, bg = c.gray750, bold = styles.bold },
    MiniTablineFill = { link = "TabLineFill" },
    MiniTablineHidden = { fg = c.gray500, bg = groups.panel },
    MiniTablineModifiedCurrent = { fg = c.gray750, bg = c.gray50, bold = styles.bold },
    MiniTablineModifiedHidden = { fg = groups.panel, bg = c.gray500 },
    MiniTablineModifiedVisible = { fg = groups.panel, bg = c.gray50 },
    MiniTablineTabpagesection = { link = "Search" },
    MiniTablineVisible = { fg = c.gray50, bg = groups.panel },

    MiniTestEmphasis = { bold = styles.bold },
    MiniTestFail = { fg = c.gray600, bold = styles.bold },
    MiniTestPass = { fg = c.gray200, bold = styles.bold },

    MiniTrailspace = { bg = c.gray600 },

    -- goolord/alpha-nvim
    AlphaButtons = { fg = c.gray200 },
    AlphaFooter = { fg = c.gray400 },
    AlphaHeader = { fg = c.gray500 },
    AlphaShortcut = { fg = c.gray100 },

    -- github/copilot.vim
    CopilotSuggestion = { fg = c.gray600, italic = styles.italic },

    -- nvim-treesitter/nvim-treesitter-context
    TreesitterContext = { bg = c.gray950 },
    TreesitterContextLineNumber = { fg = c.gray450, bg = c.gray950 },

    -- RRethy/vim-illuminate
    IlluminatedWordRead = { link = "LspReferenceRead" },
    IlluminatedWordText = { link = "LspReferenceText" },
    IlluminatedWordWrite = { link = "LspReferenceWrite" },

    -- HiPhish/rainbow-delimiters.nvim
    RainbowDelimiterBlue = { fg = c.blue700 },
    RainbowDelimiterCyan = { fg = c.cyan700 },
    RainbowDelimiterGreen = { fg = c.green700 },
    RainbowDelimiterOrange = { fg = c.orange700 },
    RainbowDelimiterRed = { fg = c.red700 },
    RainbowDelimiterViolet = { fg = c.purple700 },
    RainbowDelimiterYellow = { fg = c.yellow700 },

    -- MeanderingProgrammer/render-markdown.nvim
    RenderMarkdownBullet = { fg = c.gray100 },
    RenderMarkdownChecked = { fg = c.gray200 },
    RenderMarkdownCode = { bg = c.gray750 },
    RenderMarkdownCodeInline = { fg = c.gray50, bg = c.gray750 },
    RenderMarkdownDash = { fg = c.gray850 },
    RenderMarkdownH1Bg = { bg = groups.h1, blend = 20 },
    RenderMarkdownH2Bg = { bg = groups.h2, blend = 20 },
    RenderMarkdownH3Bg = { bg = groups.h3, blend = 20 },
    RenderMarkdownH4Bg = { bg = groups.h4, blend = 20 },
    RenderMarkdownH5Bg = { bg = groups.h5, blend = 20 },
    RenderMarkdownH6Bg = { bg = groups.h6, blend = 20 },
    RenderMarkdownQuote = { fg = c.gray500 },
    RenderMarkdownTableFill = { link = "Conceal" },
    RenderMarkdownTableHead = { fg = c.gray500 },
    RenderMarkdownTableRow = { fg = c.gray500 },
    RenderMarkdownUnchecked = { fg = c.gray500 },

    -- MagicDuck/grug-far.nvim
    GrugFarHelpHeader = { fg = c.gray500 },
    GrugFarHelpHeaderKey = { fg = c.gray400 },
    GrugFarHelpWinActionKey = { fg = c.gray400 },
    GrugFarHelpWinActionPrefix = { fg = c.gray200 },
    GrugFarHelpWinActionText = { fg = c.gray500 },
    GrugFarHelpWinHeader = { link = "FloatTitle" },
    GrugFarInputLabel = { fg = c.gray200 },
    GrugFarInputPlaceholder = { link = "Comment" },
    GrugFarResultsActionMessage = { fg = c.gray200 },
    GrugFarResultsChangeIndicator = { fg = groups.git_change },
    GrugFarResultsHeader = { fg = c.gray500 },
    GrugFarResultsLineNo = { fg = c.gray300 },
    GrugFarResultsLineColumn = { link = "GrugFarResultsLineNo" },
    GrugFarResultsMatch = { link = "CurSearch" },
    GrugFarResultsPath = { fg = c.gray200 },
    GrugFarResultsStats = { fg = c.gray300 },

    -- yetone/avante.nvim
    AvanteTitle = { fg = c.gray700, bg = c.gray100 },
    AvanteReversedTitle = { fg = c.gray100 },
    AvanteSubtitle = { fg = c.gray800, bg = c.gray200 },
    AvanteReversedSubtitle = { fg = c.gray200 },
    AvanteThirdTitle = { fg = c.gray800, bg = c.gray300 },
    AvanteReversedThirdTitle = { fg = c.gray300 },
    AvanteConflictCurrent = { fg = c.black, bg = c.orange },
    AvanteConflictIncoming = { fg = c.black, bg = c.green },
    AvanteConflictCurrentLabel = { fg = c.gray900, bg = c.orange, blend = 80 },
    AvanteConflictIncomingLabel = { fg = c.gray900, bg = c.green, blend = 80 },

    -- Saghen/blink.cmp
    BlinkCmpDoc = { fg = c.gray50 },
    BlinkCmpDocBorder = { fg = c.gray700 },
    BlinkCmpGhostText = { fg = c.gray850 },

    BlinkCmpLabel = { fg = c.gray850 },
    BlinkCmpLabelDeprecated = { fg = c.gray850, strikethrough = true },
    BlinkCmpLabelMatch = { fg = c.gray50, bold = styles.bold },

    BlinkCmpDefault = { fg = c.gray800 },
    BlinkCmpKindText = { fg = c.gray500 },
    BlinkCmpKindMethod = { fg = c.gray200 },
    BlinkCmpKindFunction = { fg = c.gray200 },
    BlinkCmpKindConstructor = { fg = c.gray200 },
    BlinkCmpKindField = { fg = c.gray500 },
    BlinkCmpKindVariable = { fg = c.gray100 },
    BlinkCmpKindClass = { fg = c.gray400 },
    BlinkCmpKindInterface = { fg = c.gray400 },
    BlinkCmpKindModule = { fg = c.gray200 },
    BlinkCmpKindProperty = { fg = c.gray200 },
    BlinkCmpKindUnit = { fg = c.gray500 },
    BlinkCmpKindValue = { fg = c.gray600 },
    BlinkCmpKindKeyword = { fg = c.gray300 },
    BlinkCmpKindSnippet = { fg = c.gray100 },
    BlinkCmpKindColor = { fg = c.gray600 },
    BlinkCmpKindFile = { fg = c.gray200 },
    BlinkCmpKindReference = { fg = c.gray600 },
    BlinkCmpKindFolder = { fg = c.gray200 },
    BlinkCmpKindEnum = { fg = c.gray200 },
    BlinkCmpKindEnumMember = { fg = c.gray200 },
    BlinkCmpKindConstant = { fg = c.gray400 },
    BlinkCmpKindStruct = { fg = c.gray200 },
    BlinkCmpKindEvent = { fg = c.gray200 },
    BlinkCmpKindOperator = { fg = c.gray200 },
    BlinkCmpKindTypeParameter = { fg = c.gray300 },
    BlinkCmpKindCodeium = { fg = c.gray200 },
    BlinkCmpKindCopilot = { fg = c.gray200 },
    BlinkCmpKindSupermaven = { fg = c.gray200 },
    BlinkCmpKindTabNine = { fg = c.gray200 },

    -- folke/snacks.nvim
    SnacksIndent = { fg = c.gray750 },
    SnacksIndentChunk = { fg = c.gray750 },
    SnacksIndentBlank = { fg = c.gray750 },
    SnacksIndentScope = { fg = c.gray200 },

    SnacksPickerMatch = { fg = c.gray100, bold = styles.bold },

    -- justinmk/vim-sneak
    Sneak = { fg = c.black, bg = c.gray600 },
    SneakCurrent = { link = "StatusLineTerm" },
    SneakScope = { link = "IncSearch" },
  }
end

return M
